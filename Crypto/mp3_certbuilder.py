from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import Encoding
from cryptography.hazmat.primitives.asymmetric import rsa
from Crypto.Util import number
import datetime
import hashlib

SUBJECT_PSEUDONYM_PAD=14

# Utility to make a cryptography.x509 RSA key object from p and q
def make_privkey(p, q, e=65537):
    n = p*q
    d = number.inverse(e, (p-1)*(q-1))
    iqmp = rsa.rsa_crt_iqmp(p, q)
    dmp1 = rsa.rsa_crt_dmp1(e, p)
    dmq1 = rsa.rsa_crt_dmq1(e, q)
    pub = rsa.RSAPublicNumbers(e, n)
    priv = rsa.RSAPrivateNumbers(p, q, d, dmp1, dmq1, iqmp, pub)
    pubkey = pub.public_key(default_backend())
    privkey = priv.private_key(default_backend())
    return privkey, pubkey

# The ECE422 CA Key! Your cert must be signed with this.
ECE422_CA_KEY, _ = make_privkey(10079837932680313890725674772329055312250162830693868271013434682662268814922750963675856567706681171296108872827833356591812054395386958035290562247234129,13163651464911583997026492881858274788486668578223035498305816909362511746924643587136062739021191348507041268931762911905682994080218247441199975205717651)

# Skeleton for building a certificate. We will require the following:
# - COMMON_NAME matches your netid.
# - COUNTRY_NAME must be US
# - STATE_OR_PROVINCE_NAME must be Illinois
# - issuer COMMON_NAME must be ece422
# - 'not_valid_before' date must must be March 1
# - 'not_valid_after'  date must must be March 27
# Other fields (such as pseudonym) can be whatever you want, we won't check them

# def make_cert(netid, pubkey, ca_key = ECE422_CA_KEY, serial=x509.random_serial_number()):
def make_cert(netid, pubkey, ca_key = ECE422_CA_KEY, serial=1):
    builder = x509.CertificateBuilder()
    builder = builder.not_valid_before(datetime.datetime(2017, 3, 1))       # CAN'T MODIFY
    builder = builder.not_valid_after (datetime.datetime(2017, 3, 27))      # CAN'T MODIFY
    builder = builder.subject_name(x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, str(netid)),                # CAN'T MODIFY
        x509.NameAttribute(NameOID.PSEUDONYM, u'x'*SUBJECT_PSEUDONYM_PAD),
        # x509.NameAttribute(NameOID.PSEUDONYM, u'unused'),
        x509.NameAttribute(NameOID.COUNTRY_NAME, u'US'),                    # CAN'T MODIFY
        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u'Illinois'),    # CAN'T MODIFY
    ]))
    builder = builder.issuer_name(x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, u'ece422'),                 # CAN'T MODIFY
]))
    builder = builder.serial_number(serial)
    builder = builder.public_key(pubkey)
    cert = builder.sign(private_key=ECE422_CA_KEY, algorithm=hashes.MD5(), backend=default_backend())
    return cert

if __name__ == '__main__':
    import sys
    if len(sys.argv) < 3:
        print('usage: python mp3-certbuilder <netid> <outfile.cer>')
        sys.exit(1)
    netid = sys.argv[1]
    outfile = sys.argv[2]

    p1 = 2228991966392078452084028364016101408909478313572284667914180348681101884113763310319729341101272340920942706548489089303249783657235299473718243113217
    q1 = 6881975494073059468814576741157274894911409261800962215657882534465992989140834241936963731174535331900333372959339410409135125989447230390564678858444212994759214235731828017599921772121304367459205531105828438207330964547580990949301961857674582055691767248115330012107545849287009763276838686274413248500087808831385857560485980433627745334237664539127136967887973451052092210839415686868798411562356134433803290062013847159912435082154034273685639166693605805603
    n1 = 15339868089196004472024300573132649192093451837250564227516010324901768383929221008182293464389745300482120205542041838962511565839154220166521556778165003512182597792620856077160409814959550758512983717551821980755392240643263536337795438417853331593011649396754846925862676546647667871467369747292943642864053352413964628087756554009281936504743049761417578234603143165278762930745766543779501811303969424488939514230177978963959518954705187455343039731341801763959596711061419392334150922561940440596474426384561596462979079195250575145211584121416830495624183774441254469842177620008205924569651397402684021954851
    p2 = 2061211737102067797595063515613211660281408350754322973561690911473833154054620670651991441892025768794042034324070491279295208754246116879252101560673
    q2 = 7442160265768173997326627142628129340781151069721584759377595527326859891219867219915119739488384711389849352279807277692877282936202373155864887904161279169149013472036308537478682204243432523613855149964644261299443501655848494416709871104808510471199584595406384965340245952454624256499468143097604351739810139160428901351970513587027736488589322233778420627810096171819217925403816734966233682804844026163602450315722005445406349109107301737565661160387220016387
    n2 = 15339868089196004472024300573132649192093451834420203541309516309283507770968019042650811046964675588594255255251031075024875301845735798350831893644585638660083717969329018763725213770374989223915469660283757299860363862265740187248771082689345689186790338006534537036325771463974457502087512413706955512768880814675059173964107182126443683044837271117986940233339670040829630004844293012059393386358079289613363439246022383763953617782834187590330801536912771370760363768712035963173807987779208695009869912525408006534069793266026934364559529689506610245802262689945474254771597475760714724064215627307987334748451

    # p = number.getPrime(1024)
    # q = number.getPrime(1024)
    privkey, pubkey = make_privkey(p2, q2)
    cert = make_cert(netid, pubkey)
    print('md5 of cert.tbs_certificate_bytes:', hashlib.md5(cert.tbs_certificate_bytes).hexdigest())

    # We will check that your certificate is DER encoded
    # We will validate it with the following command:
    #    openssl x509 -in {yourcertificate.cer} -inform der -text -noout
    with open(outfile, 'wb') as f:
        f.write(cert.public_bytes(Encoding.DER))
    print('try the following command: openssl x509 -in %s -inform der -text -noout' % outfile)
